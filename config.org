* 个人信息

#+BEGIN_SRC emacs-lisp
    (setq user-full-name "Lee ZhiCheng"
	  user-mail-address "ftt.loves@gmail.com")
#+END_SRC

* 函数定义

#+BEGIN_SRC emacs-lisp
  (defun vifon/buffer-file-or-directory-name (buf)
    "The file BUF is visiting, works also if it's a `dired' buffer."
    (with-current-buffer buf
      (or buffer-file-name
	  (and (eq major-mode 'dired-mode)
	       (boundp 'dired-directory)
	       (file-name-directory
		(if (stringp dired-directory)
		    dired-directory
		  (car dired-directory)))))))



  (defvar toggle-one-window-window-configuration nil
    "The window configuration use for `toggle-one-window'.")

  (defun toggle-one-window ()
    "Toggle between window layout and one window."
    (interactive)
    (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
	(if toggle-one-window-window-configuration
	    (progn
	      (set-window-configuration toggle-one-window-window-configuration)
	      (setq toggle-one-window-window-configuration nil))
	  (message "No other windows exist."))
      (setq toggle-one-window-window-configuration (current-window-configuration))
      (delete-other-windows)))

  (global-set-key (kbd "s-o") 'toggle-one-window)

  (defun max-gc-limit ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun reset-gc-limit ()
    (setq gc-cons-threshold 100000000))

  ;; --- system
  (defmacro with-system (type &rest body)
    "Evaluate BODY if `system-type' equals TYPE."
    (declare (indent defun))
    `(when (eq system-type ',type)
       ,@body))

  ;; time date
  (defun gcl/insert-standard-date ()
    "Inserts standard date time string."
    (interactive)
    (insert (format-time-string "%Y-%m-%d %T")))

  (defun gcl/insert-changelog-date ()
    "Insert changelog date, like yyyy/mm/dd."
    (interactive)
    (insert (format-time-string "%Y/%m/%d")))

  (defun gcl/insert-current-time ()
    "Insert current time, like hh:mm:ss."
    (interactive)
    (insert (format-time-string "%T")))

  (defun gcl/consult-file-externally (file)
    "Open the FILE externally using the system's default program."
    (interactive "fFile to open externally: ")
    (cond
     ((eq system-type 'darwin) ; macOS
      (start-process "external-program" nil "open" file))
     ((eq system-type 'gnu/linux) ; Linux
      (start-process "external-program" nil "xdg-open" file))
     ((eq system-type 'windows-nt) ; Windows
      (start-process "external-program" nil "start" "" file))
     (t ; Other platforms
      (message "Opening files externally is not supported on this platform."))))


  (defun gcl/open-current-directory ()
    (interactive)
    (gcl/consult-file-externally default-directory))

  (defun gcl/copy-file-full-name ()
    "Copy the current buffer's file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
			default-directory
		      (buffer-file-name))))
      (when filename
	(kill-new filename)
	(message "Copied buffer file name '%s' to the clipboard." filename))))

  (defun gcl/copy-file-name-only ()
    "Copy the current buffer's file name only to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
			default-directory
		      (buffer-file-name))))
      (when filename
	(kill-new (file-name-nondirectory filename))
	(message "Copied buffer file name '%s' to the clipboard." (file-name-nondirectory filename)))))

  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
    ;;  "Switches between the current buffer, and the buffer above the
    ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
	  (error "No window above this one")
	;; swap top with this one
	(set-window-buffer (selected-window) (window-buffer other-win))
	;; move this one to top
	(set-window-buffer other-win buf-this-buf)
	(select-window other-win))))

  (defun buf-move-down ()
    "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win)
	      (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
	  (error "No window under this one")
	;; swap top with this one
	(set-window-buffer (selected-window) (window-buffer other-win))
	;; move this one to top
	(set-window-buffer other-win buf-this-buf)
	(select-window other-win))))

  (defun buf-move-left ()
    "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
	  (error "No left split")
	;; swap top with this one
	(set-window-buffer (selected-window) (window-buffer other-win))
	;; move this one to top
	(set-window-buffer other-win buf-this-buf)
	(select-window other-win))))

  (defun buf-move-right ()
    "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
	  (error "No right split")
	;; swap top with this one
	(set-window-buffer (selected-window) (window-buffer other-win))
	;; move this one to top
	(set-window-buffer other-win buf-this-buf)
	(select-window other-win))))

  (defun gcl/cleanup-gc ()
    "Clean up gc."
    (setq gc-cons-threshold  (* 1024 200)) ; 200MB
    (setq gc-cons-percentage 0.5) ; 0.5s
    (garbage-collect))

  (defun switch-to-scratch-buffer ()
    (interactive)
    (switch-to-buffer (startup--get-buffer-create-scratch)))
#+END_SRC
* 重映射
#+BEGIN_SRC emacs-lisp
  (bind-key [remap just-one-space] #'cycle-spacing)
  (bind-key [remap upcase-word] #'upcase-dwim)
  (bind-key [remap downcase-word] #'downcase-dwim)
  (bind-key [remap capitalize-word] #'capitalize-dwim)
  (bind-key [remap count-words-region] #'count-words)
  (bind-key [remap eval-last-sexp] #'pp-eval-last-sexp)
  (bind-key [remap eval-expression] #'pp-eval-expression)
  (bind-key [remap zap-to-char] #'zap-up-to-char)
#+END_SRC
* 快捷打开文件
** 重新加载配置

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'reload-init-file)

(defun reload-init-file ()
  "重新加载 init.el 文件的函数"
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+END_SRC

** 打开配置文件

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f1>")
                (lambda ()
                  (interactive)
                  (find-file "~/.emacs.d/config.org")))
#+END_SRC

* Custom.el

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

* 界面配置
** 去掉工具条等

#+BEGIN_SRC emacs-lisp
  (when window-system
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0))
#+END_SRC

** 光标设置

#+BEGIN_SRC emacs-lisp
  ;; Bar cursor
  (setq-default cursor-type '(bar . 1))
  ;; 光标不闪烁
  (blink-cursor-mode -1)
#+END_SRC

** 启动界面配置

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
      initial-scratch-message ""
      initial-major-mode 'fundamental-mode
      inhibit-splash-screen t)
#+END_SRC

* 修改默认配置

#+BEGIN_SRC emacs-lisp
  ;; - 选中粘贴时能覆盖选中的内容
  (delete-selection-mode 1)
  ;; - 高亮当前行
  (global-hl-line-mode 1)
  (column-number-mode t)
  ;; 启动全屏
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; - 交换 meta -> option
  ;;  (when (eq system-type 'darwin)
  ;;  (setq mac-option-modifier 'meta))
  ;; - 备份
  ;; 统一备份到临时文件目录 /tmp/.saves
  (setq backup-by-copying t      ; don't clobber symlinks
	backup-directory-alist
	'(("." . "/tmp/.saves"))    ; don't litter my fs tree
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)       ; use versioned backups
  ;; - 自动保存
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
	create-lockfiles nil)
  ;; - 文件编码
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)
  ;; - 错误信息
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; - 截断行
  (setq-default truncate-lines t)

  ;; - 超大文件警告
  (setq large-file-warning-threshold (* 15 1024 1024))

  ;; - yes or no
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; - 单词自动修正
  (setq save-abbrevs 'silently)
  ;; - ediff
  (setq-default abbrev-mode t)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
	ediff-split-window-function 'split-window-horizontally)

  ;; - ssh
  (setq tramp-default-method "ssh"
	tramp-backup-directory-alist backup-directory-alist
	tramp-ssh-controlmaster-options "ssh")

  ;; - 驼峰单词里移动
  (subword-mode)
  ;; - 默认认为两个空格开头为一个段落，关闭此选项
  (setq sentence-end-double-space nil)
  ;; - 更好的通配符搜索
  (setq search-whitespace-regexp ".*?")
  ;; - 历史记录
  (savehist-mode)
  ;; - C-x n n 开启, C-x n w 关闭
  (put 'narrow-to-region 'disabled nil)
  ;; - PDF 预览
  (setq doc-view-continuous t)
  ;; - 窗口管理
  (when (fboundp 'winner-mode)
    (winner-mode 1))

  ;; - 最近文件
  (setq recentf-max-saved-items 1000
	recentf-exclude '("/tmp/" "/ssh:"))
  (recentf-mode)

  ;; - 在 mac 上，当进入一个新的工作空间时，会默认全屏
  (setq ns-use-native-fullscreen nil)

  ;; - 不生成备份文件
  (setq make-backup-files nil)
  #+END_SRC


优化配置项：

#+BEGIN_SRC emacs-lisp
  (setq
   ;; 缩短更新 screen 的时间
   idle-update-delay 0.1
   ;; 加速启动
   auto-mode-case-fold nil
   ;; 加快快捷键提示的速度
   process-adaptive-read-buffering nil
   ;; 提升 IO 性能
   echo-keystrokes 0.1
   ;; 增加单次读取进程输出的数据量（缺省 4KB)
   read-process-output-max (* 1024 1024)

   ;; 性能优化
   gc-cons-threshold most-positive-fixnum

   ;; 括号匹配显示但不是烦人的跳到另一个括号
   show-paren-style 'parentheses
   ;; 当插入右括号时显示匹配的左括号
   blink-matching-paren t

   ;; 不自动添加换行符到末尾, 有些情况会出现错误
   require-final-newline nil

   ;; 比较窗口设置在同一个 frame 里
   ediff-window-setup-function (quote ediff-setup-windows-plain)

   ;; 改变 *scratch* buffer 的模式
   initial-major-mode 'emacs-lisp-mode
   initial-buffer-choice t


   )
#+END_SRC

环境变量路径：

#+BEGIN_SRC emacs-lisp
  ;; 直接将环境变量拷贝到 ~/.path 中
  ;; sh -c 'printf "%s" "$PATH"' > ~/.path
  (condition-case err
      (let ((path (with-temp-buffer
		    (insert-file-contents-literally "~/.path")
		    (buffer-string))))
	(setenv "PATH" path)
	(setq exec-path (append (parse-colon-path path) (list exec-directory))))
    (error (warn "%s" (error-message-string err))))
#+END_SRC

* 一些有用的库(前置安装)

#+BEGIN_SRC emacs-lisp
  (use-package async :straight t :commands (async-start))
  (use-package cl-lib)
  (use-package dash :straight t)
  (use-package s :straight t)
#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :defer t
    :diminish which-key-mode
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    :bind* (("M-m ?" . which-key-show-top-level))
    :config
    (which-key-mode)
    (which-key-add-key-based-replacements
      "M-m ?" "top level bindings"))
#+END_SRC

* 重启Emacs

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :straight t
    :bind* (("<f2>" . restart-emacs)))
#+END_SRC

* Modalka mode(类似Evil)
#+BEGIN_SRC emacs-lisp
  (defun exit-modalka ()
    (interactive)
    (modalka-mode 0))

  (defun exit-on-space ()
    (interactive)
    (modalka-mode 0)
    (insert-char 32))

  (defun exit-on-newline ()
    (interactive)
    (modalka-mode 0)
    (newline-and-indent))

  (use-package modalka
    :straight t
    :demand t
    :bind* (("C-z" . modalka-mode))
    :diminish (modalka-mode . "μ")
    :init
    (setq modalka-cursor-type 'box)
    :config
    (global-set-key (kbd "<escape>") #'modalka-mode)
    (modalka-global-mode 1)
    (add-to-list 'modalka-excluded-modes 'magit-status-mode)
    (add-to-list 'modalka-excluded-modes 'magit-popup-mode)
    (add-to-list 'modalka-excluded-modes 'eshell-mode)
    (add-to-list 'modalka-excluded-modes 'deft-mode)
    (add-to-list 'modalka-excluded-modes 'term-mode)
    (which-key-add-key-based-replacements
      "M-m"     "Modalka prefix"
      "M-m :"   "extended prefix"
      "M-m m"   "move prefix"
      "M-m s"   "send code prefix"
      "M-m SPC" "user prefix"
      "M-m g"   "global prefix"
      "M-m o"   "org prefix"
      "M-m a"   "expand around prefix"
      "M-m e"   "buffer edit"
      "M-m i"   "expand inside prefix"
      "M-m ["   "prev nav prefix"
      "M-m ]"   "next nav prefix"))

  (define-key modalka-mode-map (kbd "o") #'exit-on-newline)
  (define-key modalka-mode-map (kbd "i") #'exit-modalka)

  (defun auto-enter-modalka-mode ()
    (modalka-mode 1))

  (run-with-idle-timer 5 nil 'auto-enter-modalka-mode)
#+END_SRC
** 默认功能按键

#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("C-r"       . dabbrev-expand)
   ("M-/"       . hippie-expand)
   ("C-S-d"     . kill-whole-line)
   ("M-m SPC c" . load-theme)
   ("M-m SPC r" . locate)
   ("M-m w"     . winner-undo)
   ("M-m g m"   . make-frame)
   ("M-m g M"   . delete-frame)
   ("M-m g n"   . select-frame-by-name)
   ("M-m g n"   . set-frame-name)
   ("M-m b"     . mode-line-other-buffer)
   ("M-m ="     . indent-region)
   ("M-m g c"   . upcase-dwim)
   ("M-m g d"   . downcase-dwim)
   ("M-m g f"   . find-file-at-point)
   ("M-m g u"   . downcase-region)
   ("M-m g U"   . upcase-region)
   ("M-m g C"   . capitalize-region)
   ("M-m g F"   . follow-mode)
   ("M-m R"     . overwrite-mode)
   ("M-m : t"   . emacs-init-time)
   ("M-m g @"   . compose-mail)
   ("M-m SPC ?" . describe-bindings)

   ("M-m e l" . duplicate-dwim)
   )
#+END_SRC

** 数字键

#+BEGIN_SRC emacs-lisp
  (modalka-define-kbd "0" "C-0")
  (modalka-define-kbd "1" "C-1")
  (modalka-define-kbd "2" "C-2")
  (modalka-define-kbd "3" "C-3")
  (modalka-define-kbd "4" "C-4")
  (modalka-define-kbd "5" "C-5")
  (modalka-define-kbd "6" "C-6")
  (modalka-define-kbd "7" "C-7")
  (modalka-define-kbd "8" "C-8")
  (modalka-define-kbd "9" "C-9")


  ;; 说明
  (which-key-add-key-based-replacements
    "0" "0"
    "1" "1"
    "2" "2"
    "3" "3"
    "4" "4"
    "5" "5"
    "6" "6"
    "7" "7"
    "8" "8"
    "9" "9")
#+END_SRC

** 单字符按键
#+BEGIN_SRC emacs-lisp
  (modalka-define-kbd "c" "M-m g c")	; 单词大写
  (modalka-define-kbd "C" "M-m g d")	; 单词小写，M-c 首字母大写
  (modalka-define-kbd "h" "C-b")	; 左
  (modalka-define-kbd "j" "C-n")	; 下
  (modalka-define-kbd "k" "C-p")	; 上
  (modalka-define-kbd "l" "C-f")	; 右
  (modalka-define-kbd "e" "M-f")	; 移动到单词结尾
  (modalka-define-kbd "b" "M-b")	; 移动到单词开头
  (modalka-define-kbd "{" "M-{")	; 章节开始
  (modalka-define-kbd "}" "M-}")	; 章节结尾
  (modalka-define-kbd "0" "C-a")	; 行首
  (modalka-define-kbd "$" "C-e")	; 行尾
  (modalka-define-kbd "G" "M->")	; 文件结尾
  (modalka-define-kbd "y" "M-w")	; 复制
  (modalka-define-kbd "p" "C-y")	; 粘贴
  (modalka-define-kbd "P" "M-y")	; 从粘贴板复制粘贴
  (modalka-define-kbd "x" "C-d")	; 删除当前字符
  (modalka-define-kbd "D" "C-k")	; 删除光标后的内容
  (modalka-define-kbd "z" "C-l")	; 定位中心行
  (modalka-define-kbd "!" "M-&")	; 异步执行shell命令
  (modalka-define-kbd "J" "C-v")	; 向下翻页
  (modalka-define-kbd "K" "M-v")	; 向上翻页
  (modalka-define-kbd "(" "M-a")	; 句子开头
  (modalka-define-kbd ")" "M-e")	; 句子结尾
  (modalka-define-kbd "/" "C-s")	; 文件内搜索
  (modalka-define-kbd "E" "C-g")	; 退出模式
  (modalka-define-kbd "d" "C-w")	; 删除区域
  (modalka-define-kbd "w" "C-x o")	; 切换窗口
  (modalka-define-kbd "B" "C-x <left>")	; 上一个buffer
  (modalka-define-kbd "N" "C-x <right>"); 下一个buffer
  (modalka-define-kbd "u" "C-x u")	; 回退
  (modalka-define-kbd "H" "C-x >")	; 向右滚动列
  (modalka-define-kbd "L" "C-x <")	; 向左滚动列
  (modalka-define-kbd "Z" "C-x 1")	; 关闭其他 buffer
  (modalka-define-kbd "q" "C-x (")	; 定制宏
  (modalka-define-kbd "Q" "C-x )")	; 退出宏
  (modalka-define-kbd "v" "C-SPC")	; 标记
  (modalka-define-kbd "?" "M-m ?")	; which-key
  (modalka-define-kbd "=" "M-m =")	; 缩进
  (modalka-define-kbd "X" "C-x C-x")	; 标记区域光标来回切换
  (modalka-define-kbd "+" "C-x r m")	; 书签
  (modalka-define-kbd "'" "C-x r b")	; 访问书签
  (modalka-define-kbd "\\" "C-c C-c")	; 执行当前光标位置代码
  (modalka-define-kbd "," "C-x M-r")	; 显示上一次的搜索结果

  (modalka-define-kbd "|" "M-m e l")	; 复制当前行或选中区域

  ;; 说明
  (which-key-add-key-based-replacements
    "ESC" "toggle mode"
    "DEL" "smart del"
    "TAB" "smart tab"
    "RET" "smart enter"
    "c"   "upcase"
    "C"   "downcase"
    "h"   "prev char"
    "j"   "next line"
    "k"   "prev line"
    "l"   "next char"
    "e"   "next word"
    "b"   "prev word"
    "n"   "next history item"
    "N"   "prev history item"
    "{"   "next para"
    "}"   "prev para"
    "0"   "start of line"
    "$"   "end of line"
    "("   "start of sentence"
    ")"   "end of sentence"
    "/"   "search"
    "|"   "duplicate line"
    "E"   "exit anything"
    "B"   "previous buffer"
    "W"   "winner undo"
    "w"   "other window"
    "G"   "end of file"
    "d"   "delete selection"
    "y"   "copy selection"
    "p"   "paste"
    "P"   "paste history"
    "x"   "delete char"
    "D"   "delete rest of line"
    "M"   "modify argument"
    "z"   "scroll center/top/bot"
    "Z"   "zoom into window"
    "H"   "scroll left"
    "J"   "scroll down"
    "K"   "scroll up"
    "L"   "scroll right"
    "'"   "org edit separately"
    ","   "vertico-repeat"
    "q"   "start macro"
    "Q"   "end macro"
    "?"   "top level bindings"
    "v"   "start selection"
    "R"   "overwrite mode"
    "X"   "exchange point and mark"
    "+"   "set bookmark"
    "'"   "jump to bookmark"
    "="   "indent region"
    "\\"  "C-c C-c"
    "!"   "async shell command"
    "&"   "shell command")

#+END_SRC
** 组合键
*** :
#+BEGIN_SRC emacs-lisp
  (modalka-define-kbd ": q" "C-x C-c")
  (modalka-define-kbd ": r" "C-x M-c")
  (modalka-define-kbd ": t" "M-m : t")
#+END_SRC
*** ][

#+BEGIN_SRC emacs-lisp
  (modalka-define-kbd "] ]" "C-x n n")
  (modalka-define-kbd "] w" "C-x n w")
  (modalka-define-kbd "] s" "M-m ] s")

  ;; 说明
  (which-key-add-key-based-replacements
    "]"   "forward nav/edit"
    "] w" "backward nav/edit"
    "] s" "next spell error")

  (which-key-add-key-based-replacements
    "["   "backward nav/edit"
    "[ [" "widen region")
#+END_SRC

*** SPC

#+BEGIN_SRC emacs-lisp
  (modalka-define-kbd "g U" "C-c C-k")
  (modalka-define-kbd "SPC SPC" "M-x")
  (modalka-define-kbd "SPC a" "C-x b")
  (modalka-define-kbd "SPC k" "C-x k")
  (modalka-define-kbd "SPC g" "M-g g")
  (modalka-define-kbd "SPC d" "C-x d")
  (modalka-define-kbd "SPC q" "C-x 0")
  (modalka-define-kbd "SPC f" "C-x C-f")
  (modalka-define-kbd "SPC w" "C-x C-s")
  (modalka-define-kbd "SPC c" "M-m SPC c")
  (modalka-define-kbd "SPC R" "M-m SPC R")
  (modalka-define-kbd "SPC ?" "M-m SPC ?")
  (modalka-define-kbd "SPC ." "M-SPC")

  ;; 说明
  (which-key-add-key-based-replacements
    "SPC"   "custom prefix"
    "SPC ." "just one space"
    "SPC ?" "describe bindings"
    "SPC j" "jump to cmd"
    "SPC f" "find file"
    "SPC a" "switch buffers"
    "SPC g" "goto line"
    "SPC d" "dired"
    "SPC k" "close buffer"
    "SPC w" "save buffer"
    "SPC c" "load theme"
    "SPC R" "locate"
    "SPC q" "quit window"
    "g U"   "simulate C-c C-k")
#+END_SRC

*** g

#+BEGIN_SRC emacs-lisp
  (modalka-define-kbd "g g" "M-<")
  (modalka-define-kbd "g o" "C-x C-e")
  (modalka-define-kbd "g O" "C-M-x")
  (modalka-define-kbd "g m" "M-m g m")
  (modalka-define-kbd "g M" "M-m g M")
  (modalka-define-kbd "g n" "M-m g n")
  (modalka-define-kbd "g N" "M-m g N")
  (modalka-define-kbd "g f" "M-m g f")
  (modalka-define-kbd "g F" "M-m g F")
  (modalka-define-kbd "g j" "M-m g j")
  (modalka-define-kbd "g k" "M-m g k")
  (modalka-define-kbd "g q" "M-m g q")
  (modalka-define-kbd "g w" "C-x 3")
  (modalka-define-kbd "g -" "C-x 2")
  (modalka-define-kbd "g @" "M-m g @")
  (modalka-define-kbd "g ;" "M-m g ;")
  (modalka-define-kbd "g :" "M-m g :")
  (modalka-define-kbd "g #" "M-m g #")
  (modalka-define-kbd "g {" "M-m g {")
  (modalka-define-kbd "g }" "M-m g }")
  (modalka-define-kbd "g (" "M-m g (")
  (modalka-define-kbd "g )" "M-m g )")
  (modalka-define-kbd "g S" "C-j")
  (modalka-define-kbd "g ?" "C-h k")

  ;; consult
  (modalka-define-kbd "g i" "M-g i")
  (modalka-define-kbd "g r" "M-g r")

  ;; edit
  (modalka-define-kbd "g l" "M-g M-g")	; goto line
  ;; 说明

  (which-key-add-key-based-replacements
    "g"   "global prefix"
    "g i" "consult imenu"
    "g r" "consult ripgrep"
    "g g" "start of file"
    "g m" "make frame"
    "g M" "delete frame"
    "g n" "select frame by name"
    "g N" "name frame"
    "g j" "next pdf page"
    "g k" "previous pdf page"
    "g f" "file/url at cursor"
    "g F" "enable follow mode"
    "g l" "goto line"
    "g o" "eval elisp"
    "g O" "eval defun"
    "g w" "vertical split win"
    "g -" "horizontal split win"
    "g S" "split line"
    "g @" "compose mail"
    "g #" "list eww histories"
    "g x" "browse with eww"
    "g :" "browse with external browser"
    "g {" "eww back"
    "g }" "eww forward"
    "g (" "info previous"
    "g )" "info next"
    "g q" "format para"
    "g ?" "find command bound to key")
#+END_SRC

*** i

#+BEGIN_SRC emacs-lisp
  ;; (modalka-define-kbd "i a" "C-x h")

  ;; (which-key-add-key-based-replacements
  ;;  "i"   "expand prefix"
  ;;  "i a" "expand entire buffer")
#+END_SRC

* 内置包管理

** flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :straight t
    :diminish (flyspell-mode . "φ")
    :bind* (("M-m ] s" . flyspell-goto-next-error)))
#+END_SRC
* 文件目录管理

** dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :bind (:map dired-mode-map
	      ("C-c C-e" . wdired-change-to-wdired-mode))
    :init
    (setq dired-dwim-target t
	dired-recursive-copies 'top
	dired-recursive-deletes 'top
	dired-listing-switches "-alh")
    :config
    (add-hook 'dired-mode-hook 'dired-hide-details-mode))
#+END_SRC

* 环境变量

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config
    (setq exec-path-from-shell-variables '("PATH" "MANPATH" "LSP_USE_PLISTS" "NODE_PATH")
	  exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))
#+END_SRC
* 状态栏

** diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :straight t
    :demand t
    :diminish (visual-line-mode . "ω")
    :diminish hs-minor-mode
    :diminish abbrev-mode
    :diminish auto-fill-function
    :diminish subword-mode
    :diminish eldoc-mode
    )
#+END_SRC

一些内置的 minor mode 不能通过上面的方式来隐藏，然后可以通过单独定义一些函数来达到目的，如下：

** org-indent mode

#+BEGIN_SRC emacs-lisp
  (defun sk/diminish-org-indent ()
    (interactive)
    (diminish 'org-indent-mode ""))
  (add-hook 'org-indent-mode-hook 'sk/diminish-org-indent)
#+END_SRC

** auto-revert mode

#+BEGIN_SRC emacs-lisp
  (defun sk/diminish-auto-revert ()
    (interactive)
    (diminish 'auto-revert-mode ""))
  (add-hook 'auto-revert-mode-hook 'sk/diminish-auto-revert)
#+END_SRC

* 发现模式

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :straight t
    :bind (("C-h C-m" . discover-my-major)
	   ("C-h s-m" . discover-my-mode)))
#+END_SRC

* Hydras

#+BEGIN_SRC emacs-lisp
  (use-package hydra :straight t)
#+END_SRC

* 自动补全
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-completion
    :straight t
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+END_SRC
** vertico

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :bind (("C-x M-r" . vertico-repeat)
	   :map vertico-map
	   ("C-l" . vertico-directory-delete-word)
	   ("M-g" . vertico-multiform-grid)
	   ("M-q" . vertico-multiform-flat))
    :init (vertico-mode 1)
    :config (progn
	      (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
	      (vertico-mouse-mode 1)
	      (vertico-multiform-mode 1)
	      (setq vertico-multiform-categories '((consult-grep buffer))
		    vertico-multiform-commands '((tmm-menubar flat)
						 (tmm-shortcut flat)))

	      ;; Needed with `read-file-name-completion-ignore-case'.
	      ;; See these links:
	      ;; - https://github.com/minad/vertico/issues/341
	      ;; - https://debbugs.gnu.org/cgi/bugreport.cgi?bug=60264
	      ;;
	      ;; Regardless of it fixing an actual bug, I prefer
	      ;; this behavior.
	      (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))
    )
#+END_SRC

** orderless

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :straight t
    :after vertico
    :config (progn
	      (setq orderless-matching-styles '(orderless-regexp
						orderless-initialism
						orderless-prefixes)
		    orderless-component-separator #'orderless-escapable-split-on-space)

	      ;; Use the built-in "partial-completion" style to complete
	      ;; file inputs such as "/e/ni/co.nix" into
	      ;; "/etc/nixos/configuration.nix".
	      (setq completion-category-defaults nil
		    completion-category-overrides '((file (styles partial-completion))))

	      ;; Make the stock file completion styles ("basic" and
	      ;; "partial-completion") case insensitive, it fits better
	      ;; with the behavior provided by orderless.  See the
	      ;; `orderless-smart-case' documentation for how it
	      ;; interacts with orderless itself (spoiler: in this setup
	      ;; it doesn't).
	      (setq read-file-name-completion-ignore-case t)

	      (setq completion-styles '(orderless basic))

	      (defun vifon/call-without-orderless-dispatchers (orig &rest args)
		"Use with `advice-add' (`:around') to ignore the dispatchers."
		(let ((orderless-style-dispatchers nil))
		  (apply orig args)))))
#+END_SRC

** embark

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :straight t
    :bind (("C-c o" . embark-dwim)
	   ("C-."   . embark-act)
	   :map minibuffer-local-map
	   ("M-o"   . embark-act)
	   :map embark-command-map
	   ;; Unbind the dangerous `global-set-key' and `local-set-key'
	   ;; actions.  It's far too easy to accidentally bind over some
	   ;; `self-insert-command' binding or even over
	   ;; \\[keyboard-quit].
	   ("g" . nil)
	   ("l" . nil)
	   :map embark-collect-mode-map
	   ("m" . vifon/embark-select-and-forward))
    :config (progn
	      (setq embark-mixed-indicator-delay 2)

	      ;; Make the eval action editable.  Evaluating code
	      ;; in-place is simple enough without Embark, if I invoke
	      ;; it with Embark, I almost definitely want to edit the
	      ;; expression beforehand.  And even if not, I can
	      ;; just confirm.
	      (cl-pushnew 'embark--allow-edit
			  (alist-get 'pp-eval-expression embark-target-injection-hooks))

	      ;; Reload the project list after using
	      ;; C-u `embark-act' with `project-forget-project'.
	      (cl-pushnew 'embark--restart
			  (alist-get 'project-forget-project embark-post-action-hooks))

	      (defun embark-act-with-eval (expression)
		"Evaluate EXPRESSION and call `embark-act' on the result."
		(interactive "sExpression: ")
		(with-temp-buffer
		  (let ((expr-value (eval (read expression))))
		    (insert (if (stringp expr-value)
				expr-value
			      (format "%S" expr-value))))
		  (embark-act)))

	      (dolist (keymap (list embark-variable-map embark-expression-map))
		(define-key keymap (kbd "v") #'embark-act-with-eval))

	      ;; Source: https://github.com/oantolin/embark/wiki/Additional-Actions#attaching-file-to-an-email-message
	      (autoload 'gnus-dired-attach "gnus-dired" nil t)
	      (defun embark-attach-file (file)
		"Attach FILE to an email message."
		(interactive "fAttach: ")
		(cl-letf (((symbol-function 'y-or-n-p) #'always))
		  (gnus-dired-attach (list file))))
	      (bind-key "a" #'embark-attach-file embark-file-map)

	      (defun vifon/embark-select-and-forward ()
		(interactive)
		(embark-select)
		(forward-button 1))))


  (use-package embark-consult
    :straight t
    :after (embark consult))
#+END_SRC

** marginalia

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    :after vertico
    :demand t                     ; :demand applies to :bind but not
					  ; :after.  We want to eagerly load
					  ; marginalia once vertico is loaded.
    :bind (:map minibuffer-local-map
		("C-o" . marginalia-cycle))
    :config (marginalia-mode 1))
#+END_SRC

** consult

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :straight t
    :bind (:map consult-mode-map
		;; M-s …
		("M-s u" . consult-focus-lines)
		("M-s k" . consult-keep-lines)
		("M-s e" . consult-isearch-history)
		("M-s d" . consult-find)
		;; M-g …
		("M-g g" . consult-line)
		("M-g o" . consult-outline)
		("C-s-s" . consult-outline)
		("M-g i" . consult-imenu)
		("M-g I" . consult-info)
		("M-g r" . consult-ripgrep)
		("M-g m" . consult-mark)
		("M-g M" . consult-global-mark)
		;; Misc.
		("C-x C-r" . consult-recent-file)
		;; Remaps
		([remap switch-to-buffer]              . consult-buffer)
		([remap switch-to-buffer-other-window] . consult-buffer-other-window)
		([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
		([remap project-switch-to-buffer]      . consult-project-buffer)
		([remap yank-pop]                      . consult-yank-pop)
		([remap goto-line]                     . consult-goto-line)
		([remap bookmark-jump]                 . consult-bookmark)
		([remap repeat-complex-command]        . consult-complex-command)
		([remap isearch-forward]               . consult-line)
		;; Remaps for `Info-mode'.
		([remap Info-search] . consult-info)

		:map isearch-mode-map
		("TAB" . consult-line))
    :init (progn
	    (defvar consult-mode-map (make-sparse-keymap))
	    (define-minor-mode consult-mode
	      "Provide the `consult' commands in a single keymap."
	      :global t
	      (if consult-mode
		  (define-key minibuffer-local-map
			      [remap previous-matching-history-element]
			      #'consult-history)
		(define-key minibuffer-local-map
			    [remap previous-matching-history-element]
			    nil)))
	    (consult-mode 1))
    :config (progn
	      (consult-customize
	       consult-ripgrep consult-grep
	       consult-buffer consult-recent-file
	       :preview-key "M-.")

	      (defun vifon/orderless-fix-consult-tofu (pattern index total)
		"Ignore the last character which is hidden and used only internally."
		(when (string-suffix-p "$" pattern)
		  `(orderless-regexp . ,(concat (substring pattern 0 -1)
						"[\x200000-\x300000]*$"))))

	      (dolist (command '(consult-buffer consult-line))
		(advice-add command :around
			    (lambda (orig &rest args)
			      (let ((orderless-style-dispatchers (cons #'vifon/orderless-fix-consult-tofu
								       orderless-style-dispatchers)))
				(apply orig args)))))

	      ;; Disable consult-buffer project-related capabilities as
	      ;; they are very slow in TRAMP.
	      (setq consult-buffer-sources
		    (delq 'consult--source-project-buffer
			  (delq 'consult--source-project-file consult-buffer-sources)))

	      (setq consult--source-hidden-buffer
		    (plist-put consult--source-hidden-buffer :narrow ?h))

	      (defvar vifon/consult--source-disassociated-file-buffer
		`(:name     "Disassociated File"
			    :narrow   ?e
			    :category buffer
			    :state    ,#'consult--buffer-state
			    :items
			    ,(lambda ()
			       (consult--buffer-query :sort 'visibility
						      :as #'buffer-name
						      :predicate
						      (lambda (buf)
							(let ((file (vifon/buffer-file-or-directory-name buf)))
							  (and file (not (file-exists-p file)))))))
			    "Disassociated buffer candidate source for `consult-buffer'.

  Inspired by: `ibuffer-mark-dissociated-buffers'."))
	      (defun vifon/consult-disassociated-buffers ()
		"Like `consult-buffer' but only for disassociated buffers."
		(interactive)
		(consult-buffer '(vifon/consult--source-disassociated-file-buffer)))


	      (defvar vifon/consult--source-remote-file-buffer
		`(:name     "Remote File"
			    :narrow   ?r
			    :hidden   t
			    :category buffer
			    :state    ,#'consult--buffer-state
			    :items
			    ,(lambda ()
			       (consult--buffer-query :sort 'visibility
						      :as #'buffer-name
						      :predicate
						      (lambda (buf)
							(let ((file (vifon/buffer-file-or-directory-name buf)))
							  (and file (file-remote-p file))))))
			    "Remote file buffer candidate source for `consult-buffer'."))
	      (add-to-list 'consult-buffer-sources
			   'vifon/consult--source-remote-file-buffer
			   'append)

	      ;; Use Consult to select xref locations with preview.
	      (setq xref-show-xrefs-function #'consult-xref
		    xref-show-definitions-function #'consult-xref)

	      (add-to-list 'consult-bookmark-narrow
			   '(?t "TMSU" tmsu-dired-bookmark-open))))
#+END_SRC
** corfu

#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :straight t
    :init (global-corfu-mode 1)
    :config (progn
	      (corfu-popupinfo-mode 1)
	      (corfu-echo-mode 1)
	      (setq corfu-popupinfo-delay '(nil . t)
		    corfu-echo-delay t)))

  ;; https://archive.is/Gj6Fu
  (autoload 'ffap-file-at-point "ffap")
  (defun complete-path-at-point+ ()
    (let ((fn (ffap-file-at-point))
	  (fap (thing-at-point 'filename)))
      (when (and (or fn (equal "/" fap))
		 (save-excursion
		   (search-backward fap (line-beginning-position) t)))
	(list (match-beginning 0)
	      (match-end 0)
	      #'completion-file-name-table :exclusive 'no))))
  (add-hook 'completion-at-point-functions
	    #'complete-path-at-point+
	    'append)

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  ;;
  ;; Taken from the Vertico docs.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)

  ;; Use the completing-read UI for the M-tab completion unless
  ;; overridden (for example by `corfu').
  (setq-default completion-in-region-function
		(lambda (&rest args)
		  (apply (if vertico-mode
			     #'consult-completion-in-region
			   #'completion--in-region)
			 args)))
#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :defer t
    :diminish which-key-mode
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    :bind* (("s-m ?" . which-key-show-top-level))
    :config
    (which-key-mode)
    (which-key-add-key-based-replacements
      "s-m ?" "top level bindings"))
#+END_SRC

* symbol overlay

#+BEGIN_SRC emacs-lisp
  (use-package symbol-overlay
    :straight t
    :defer t
    :config
    (symbol-overlay-mode +1)
    (global-set-key (kbd "M-i") #'symbol-overlay-put)
    (global-set-key (kbd "M-n") #'symbol-overlay-switch-forward)
    (global-set-key (kbd "M-p") #'symbol-overlay-switch-backward)
    (global-set-key (kbd "<f7>") #'symbol-overlay-mode)
    (global-set-key (kbd "<f8>") #'symbol-overlay-remove-all)
    )
#+END_SRC
* expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region :straight t)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra :straight t)


#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :bind* (("M-m g d" . magit))
    :config
    ;; ;; 提交时候不显示提交细节
    (setq magit-commit-show-diff nil)
    ;; ;; 没有焦点时候不刷新状态
    (setq magit-refresh-status-buffer nil)
    ;; ;; 当前buffer打开magit
    (setq magit-display-buffer-function
	  (lambda (buffer)
	    (display-buffer buffer '(display-buffer-same-window))))
    ;; (setq magit-ellipsis (get-byte 0 "."))
    ;; ;; 加速diff
    (setq magit-revision-insert-related-refs nil)
    (setq magit-diff-refine-hunk t)
    (setq magit-diff-paint-whitespace nil)
    (setq magit-ediff-dwim-show-on-hunks t)
    (setq magit-display-buffer-function
	  (lambda (buffer)
	    (display-buffer buffer '(display-buffer-same-window))))
    ;; ;; 加速diff
    (setq magit-revision-insert-related-refs nil)
    )

  (modalka-define-kbd "g d" "M-m g d")
  (which-key-add-key-based-replacements "g d" "magit")

  (use-package blamer
    :straight t
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 40)
    (blamer-author-formatter " ✎ %s ")
    (blamer-datetime-formatter "[%s]")
    (blamer-commit-formatter " ● %s")
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
		     ;; :background nil
		     :height 120
		     :italic t)))
    :config
    ;; (global-blamer-mode 1)
    )

  (use-package git-modes
    :straight t
    :config
    (add-to-list 'auto-mode-alist
		 (cons "/.dockerignore\\'" 'gitignore-mode))
    (add-to-list 'auto-mode-alist
		 (cons "/.gitignore\\'" 'gitignore-mode))
    (add-to-list 'auto-mode-alist
		 (cons "/.gitconfig\\'" 'gitconfig-mode))
    )

  (use-package smerge-mode :straight t)

  (use-package diff-hl
    :straight t
    :config
    (global-diff-hl-mode))
#+END_SRC
* 文本编辑
** iedit
#+BEGIN_SRC emacs-lisp
  (use-package maple-iedit
    :straight (:type git :host github :repo "honmaple/emacs-maple-iedit")
    :commands (maple-iedit-match-all maple-iedit-match-next maple-iedit-match-previous)
    :config
    (setq maple-iedit-ignore-case t)

    (defhydra maple/iedit ()
      ("n" maple-iedit-match-next "next")
      ("t" maple-iedit-skip-and-match-next "skip and next")
      ("T" maple-iedit-skip-and-match-previous "skip and previous")
      ("p" maple-iedit-match-previous "prev"))
    :bind* (("M-m e i" . maple/iedit/body)))

  (modalka-define-kbd "C-," "M-m e i")

  (which-key-add-key-based-replacements
    "C-," "iedit"
    )

#+END_SRC
** move-text
#+BEGIN_SRC emacs-lisp
  (use-package move-text :straight t)
  (global-set-key (kbd "s-<") 'move-text-up)
  (global-set-key (kbd "s->") 'move-text-down)
#+END_SRC

** string-inflection

#+BEGIN_SRC emacs-lisp
  (use-package string-inflection :straight t)
  (global-set-key (kbd "s-i") 'my-string-inflection-cycle-auto)

  (defun my-string-inflection-cycle-auto ()
    "switching by major-mode"
    (interactive)
    (cond
     ;; for emacs-lisp-mode
     ((eq major-mode 'emacs-lisp-mode)
      (string-inflection-all-cycle))
     ;; for python
     ((eq major-mode 'python-mode)
      (string-inflection-python-style-cycle))
     ;; for java
     ((eq major-mode 'java-mode)
      (string-inflection-java-style-cycle))
     ;; for elixir
     ((eq major-mode 'elixir-mode)
      (string-inflection-elixir-style-cycle))
     (t
      ;; default
      (string-inflection-ruby-style-cycle))))
#+END_SRC

** parrot
#+BEGIN_SRC emacs-lisp
  (use-package parrot
    :straight t
    :config
    (parrot-mode -1)
    (setq parrot-rotate-dict
	  '(
	    (:rot ("alpha" "beta") :caps t :lower nil)
	    ;; => rotations are "Alpha" "Beta"

	    (:rot ("snek" "snake" "stawp"))
	    ;; => rotations are "snek" "snake" "stawp"

	    (:rot ("yes" "no") :caps t :upcase t)
	    ;; => rotations are "yes" "no", "Yes" "No", "YES" "NO"

	    (:rot ("&" "|"))
	    ;; => rotations are "&" "|"

	    ;; default dictionary starts here ('v')
	    (:rot ("begin" "end") :caps t :upcase t)
	    (:rot ("enable" "disable") :caps t :upcase t)
	    (:rot ("enter" "exit") :caps t :upcase t)
	    (:rot ("forward" "backward") :caps t :upcase t)
	    (:rot ("front" "rear" "back") :caps t :upcase t)
	    ;; (:rot ("get" "set") :caps t :upcase t)
	    (:rot ("high" "low") :caps t :upcase t)
	    (:rot ("in" "out") :caps t :upcase t)
	    (:rot ("left" "right") :caps t :upcase t)
	    (:rot ("min" "max") :caps t :upcase t)
	    (:rot ("on" "off") :caps t :upcase t)
	    (:rot ("prev" "next"))
	    (:rot ("start" "stop") :caps t :upcase t)
	    (:rot ("true" "false") :caps t :upcase t)
	    (:rot ("&&" "||"))
	    (:rot ("==" "!="))
	    (:rot ("." "->"))
	    (:rot ("if" "else" "elif"))
	    (:rot ("ifdef" "ifndef"))
	    (:rot ("int8_t" "int16_t" "int32_t" "int64_t"))
	    (:rot ("uint8_t" "uint16_t" "uint32_t" "uint64_t"))
	    (:rot ("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
	    (:rot ("1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th"))

	    ;; mine
	    (:rot ("let" "const" "var"))
	    (:rot ("sm" "md" "lg" "xl" "2xl" "3xl"))
	    (:rot ("aspect-auto" "aspect-square" "aspect-video"))
	    (:rot ("break-after-auto" "break-after-avoid" "break-after-all" "break-after-avoid-page" "break-after-page" "break-after-left" "break-after-right" "break-after-column"))
	    (:rot ("box-border" "box-content"))
	    (:rot ("block" "inline-block" "inline" "flex" "inline-flex" "table" "inline-table" "table-caption" "table-cell" "table-column" "table-column-group" "table-footer-group" "table-header-group" "table-row-group" "table-row" "flow-root" "grid" "inline-grid" "contents" "list-item" "hidden"))
	    (:rot ("float-right" "float-left" "float-none"))
	    (:rot ("clear-left" "clear-right" "clear-both" "clear-none"))
	    (:rot ("object-contain" "object-cover" "object-fill" "object-none" "object-scale-down"))
	    (:rot ("object-bottom" "object-center" "object-left" "object-left-bottom" "object-left-top" "object-right" "object-right-bottom" "object-right-top" "object-top"))
	    (:rot ("overflow-auto" "overflow-hidden" "overflow-clip" "overflow-visible" "overflow-scroll"))
	    (:rot ("static" "fixed" "absolute" "relative" "sticky"))
	    (:rot ("visible" "invisible" "collapse"))
	    (:rot ("flex-row" "flex-row-reverse" "flex-col" "flex-col-reverse"))
	    (:rot ("flex-wrap" "flex-wrap-reverse" "flex-nowrap"))
	    (:rot ("flex-1" "flex-auto" "flex-initial" "flex-none"))
	    (:rot ("grow" "grow-0"))
	    (:rot ("shrink" "shrink-0"))
	    (:rot ("get" "post" "set") :caps t :upcase t)
	    )))

  (global-set-key (kbd "s-I") 'parrot-rotate-next-word-at-point)
#+END_SRC
* 切换引号
#+BEGIN_SRC emacs-lisp
  (use-package toggle-quotes-plus
    :straight (toggle-quotes-plus :type git :host github :repo "jcs-elpa/toggle-quotes-plus")
    :bind* (("C-'" . toggle-quotes-plus))
    :config
    (setq toggle-quotes-plus-chars '("\""
				     "'"
				     "`")))
#+END_SRC
* 主题配置
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :straight t)
  (use-package all-the-icons-dired
    :straight t
    :hook ((dired-mode . all-the-icons-dired-mode)))
#+END_SRC
** doom theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Must be used *after* the theme is loaded
  ;; (custom-set-faces
  ;; `(mode-line ((t (:background ,(doom-color 'dark-violet)))))
  ;; `(font-lock-comment-face ((t (:foreground ,(doom-color 'base6))))))
  ;; 设置默认字体为等宽字体
  ;; (set-face-attribute 'default nil
  ;; 		    :family "Fira Code"
  ;; 		    :height 130
  ;; 		    :weight 'normal
  ;; 		    :width 'normal)
#+END_SRC
** mode line

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (progn
	    (setq doom-modeline-env-version nil
		  doom-modeline-icon nil
		  doom-modeline-minor-modes t)
	    (doom-modeline-mode 1)))
#+END_SRC
* 翻译
#+BEGIN_SRC emacs-lisp
  (use-package fanyi
    :straight t
    :bind* (("s-y" . fanyi-dwim2))
    :custom
    (fanyi-providers '(;; 海词
		       fanyi-haici-provider
		       ;; 有道同义词词典
		       fanyi-youdao-thesaurus-provider
		       ;; Etymonline
		       fanyi-etymon-provider
		       ;; Longman
		       fanyi-longman-provider)))

  ;; (setq longman-ins (clone fanyi-longman-provider))
  ;; (oset longman-ins :word "successful")
  ;; (fanyi--spawn longman-ins)

  ;; Wait until *fanyi* buffer has a longman section which means longman-ins has parsed the result.
  ;;
  ;; benchmark the render function.
  ;; (benchmark-run 10 (fanyi-render longman-ins))
  ;;=> (0.150839075 0 0.0)
#+END_SRC
* org-mode
#+BEGIN_SRC emacs-lisp
  (when (version<= "9.2" (org-version))
    (require 'org-tempo))
#+END_SRC
* 开发配置

** [un]comment

#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :straight t
    :bind* (("M-;" . evilnc-comment-or-uncomment-lines))
    )
#+END_SRC

** yaml

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'"
    :mode "\\.yaml\\'"
    :hook ((yaml-mode . yaml-imenu-enable)))

  (use-package yaml-imenu
    :straight t
    :after yaml-mode)
#+end_src

** python

#+begin_src emacs-lisp
  (use-package python-mode :straight t)
#+end_src

** golang

#+begin_src emacs-lisp
  (use-package go-mode :straight t)
#+end_src

** dockfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode :straight t)
#+end_src

** php

#+begin_src emacs-lisp
  (use-package php-mode :straight t)
#+end_src

** sql

#+begin_src emacs-lisp
  (use-package sql-indent :straight t)
  (add-hook 'sql-mode-hook 'sqlind-minor-mode)
#+end_src

** pkg

#+begin_src emacs-lisp
  (use-package pkg-info :straight t)
#+end_src

** lua

#+begin_src emacs-lisp
  (use-package lua-mode :straight t)
#+end_src

** flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :init (global-flycheck-mode))
#+end_src

** auto save
#+begin_src emacs-lisp
  (use-package auto-save
    :straight (auto-save :type git :host github :repo "manateelazycat/auto-save")
    :config
    (auto-save-enable)
    (setq auto-save-silent t)
    (setq auto-save-delete-trailing-whitespace t))
#+end_src
* 保存时自动转换配置

#+BEGIN_SRC emacs-lisp
  (defun tangle-if-init ()
    "If the current buffer is 'init.org' the code-blocks are
      tangled, and the tangled file is compiled."

    (when (string-suffix-p "config.org" (buffer-file-name))
      (tangle-init)))

  (defun tangle-init-sync ()
    (interactive)
    (message "Tangling init")
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil)
	  (src  (expand-file-name "config.org" user-emacs-directory))
	  (dest (expand-file-name "config.el"  user-emacs-directory)))
      (require 'ob-tangle)
      (org-babel-tangle-file src dest)
      (if (byte-compile-file dest)
	  (byte-compile-dest-file dest)
	(with-current-buffer byte-compile-log-buffer
	  (buffer-string)))))

  (defun tangle-init ()
    "Tangle init.org asynchronously."

    (interactive)
    (message "Tangling init")
    (async-start
     (symbol-function #'tangle-init-sync)
     (lambda (result)
       (message "Init tangling completed: %s" result))))
#+END_SRC
* 按键绑定表

** 单键
| modalka   | normal        | function                            |
|-----------+---------------+-------------------------------------|
| ~0...9~   | ~C-0...9~     | -                                   |
| ~o~       | -             | exit modalka and newline            |
| ~i~       | -             | exit modalka and insert             |
| ~c~       | ~M-m g c~     | upcase word or region               |
| ~C~       | ~M-m g d~     | downcase word or region             |
| ~h/j/k/l~ | ~C-b/n/p/f~   | move cursor left/down/up/right      |
| ~e/b~     | ~M-f/b~       | move to word end/begin              |
| ~{}~      | ~M-{}~        | move to begin/end of paragraph      |
| ~0$~      | ~C-a/e~       | move to begin/end of line           |
| ~G~       | ~M->~         | move to file end                    |
| ~y~       | ~M-w~         | yank                                |
| ~p~       | ~C-y~         | paste                               |
| ~P~       | ~M-y~         | paste from clipboard                |
| ~x~       | ~C-d~         | delete char                         |
| ~D~       | ~C-k~         | delete line from current position   |
| ~z~       | ~C-l~         | locate to center                    |
| ~!~       | ~M-&~         | execute command async               |
| ~J/K~     | ~C/M-v~       | turn page down/up                   |
| ~()~      | ~M-a/e~       | move to sentence begin/end          |
| ~/~       | ~C-s~         | search line in buffer               |
| ~E~       | ~C-g~         | quit mode                           |
| ~d~       | ~C-w~         | delete region                       |
| ~w~       | ~C-x o~       | switch window                       |
| ~B~       | ~C-x <left>~  | previous buffer                     |
| ~N~       | ~C-x <right>~ | next buffer                         |
| ~u~       | ~C-x u~       | rollback                            |
| ~H/L~     | ~C-x ><~      | scroll to line start/end            |
| ~Z~       | ~C-x 1~       | close other windows                 |
| ~q/Q~     | ~C-x ()~      | macro on/off                        |
| ~v~       | ~C-SPC~       | mark start                          |
| ~?~       | ~M-m ?~       | which key                           |
| ~=~       | ~M-m =~       | indent region                       |
| ~X~       | ~C-x C-x~     | exchange cursor between mark region |
| ~+~       | ~C-x r m~     | add bookmark                        |
| ~'~       | ~C-x r b~     | visit bookmark                      |
| ~\~       | ~C-c C-c~     | execute codeblock                   |
| ~,~       | ~C-x M-r~     | repeat vertico search result        |
| ~vline~   | ~M-m e l~     | duplicate line                      |
| ~`~       | ~M-m e i~     | iedit                               |
|           |               |                                     |
** 组合键
| modalka    | normal      | function                     |
|------------+-------------+------------------------------|
| ~:q~       | ~C-x C-c~   | quit emacs                   |
| ~:t~       | ~C-x M-c~   | emacs init time              |
|------------+-------------+------------------------------|
| ~]]~       | ~C-x n n~   | focus line                   |
| ~]w~       | ~C-x n w~   | exit focus line              |
| ~]s~       | ~M-m ] s~   | next spell error             |
|------------+-------------+------------------------------|
| ~SPC SPC~  | ~M-x~       | execute command              |
| ~SPC a~    | ~C-x b~     | switch buffer                |
| ~SPC k~    | ~C-x k~     | kill buffer                  |
| ~SPC g~    | ~M-g g~     | goto line                    |
| ~SPC d~    | ~C-x d~     | dired                        |
| ~SPC q~    | ~C-x 0~     | quit window                  |
| ~SPC f~    | ~C-x C-f~   | find file                    |
| ~SPC w~    | ~C-x C-s~   | save buffer                  |
| ~SPC c~    | ~M-m SPC c~ | load theme                   |
| ~SPC R~    | ~M-m SPC R~ | locate                       |
| ~SPC ?~    | ~M-m SPC ?~ | describe bindings            |
| ~SPC .~    | ~M-SPC~     | just one space               |
|------------+-------------+------------------------------|
| ~g i~      | ~M-g i~     | imenu                        |
| ~g r~      | ~M-g r~     | consult ripgrep              |
| ~g d~      | ~M-m g d~   | magit                        |
| ~g g~      | ~M-<~       | goto start of buffer         |
| ~g o~      | ~C-x C-e~   | eval elisp                   |
| ~g O~      | ~C-M-x~     | eval defun                   |
| ~g m~      | ~M-m g m~   | make frame                   |
| ~g M~      | ~M-m g M~   | delete frame                 |
| ~g n~      | ~M-m g n~   | select frame by name         |
| ~g N~      | ~M-m g N~   | name frame                   |
| ~g f~      | ~M-m g f~   | file/url at cursor           |
| ~g l~      | ~M-g M-g~   | goto line                    |
| ~g j~      | ~M-m g j~   | next pdf page                |
| ~g k~      | ~M-m g k~   | prev pdf page                |
| ~g q~      | ~M-m g q~   | format paragraph             |
| ~g w~      | ~C-x 3~     | vertical split window        |
| ~g -~      | ~C-x 2~     | horizaontal split window     |
| ~g S~      | ~C-j~       | split line                   |
| ~g @~      | ~M-m g @~   | compose mail                 |
| ~g ;~      | ~M-m g ;~   | browse with external browser |
| ~g {}~     | ~M-m g {}~  | eww back/forward             |
| ~g ()~     | ~M-m g ()~  | info prev/next               |
| ~g ?~      | ~~          | find bound key               |
|------------+-------------+------------------------------|
| s, Command |             |                              |
| -          | ~s i~       | string inflection            |
| -          | ~s I~       | parrot, switch word          |
| -          | ~s o~       | toggle one window            |
| -          | ~s y~       | fanyi                        |
| -          | ~s k~       | kill current buffer          |
|------------+-------------+------------------------------|
| C, Control |             |                              |
| -          | ~C-'~       | toggle quotes                |

# Local Variables:
# eval: (when (fboundp #'tangle-if-init) (add-hook 'after-save-hook #'tangle-if-init))
# End:
