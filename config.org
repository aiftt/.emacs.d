* early-init.el
#+begin_src emacs-lisp :tangle "./early-init.el"
(setq package-enable-at-startup nil)
(setenv "LSP_USE_PLISTS" "true")
(provide 'early-init)
;;; early-init.el ends here
#+end_src
* custom.el
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
* Definitions
** personal
#+begin_src emacs-lisp
  (setq user-mail-address "ftt.loves@gmail.com")
(setq user-full-name "Lee ZhiCheng")
#+end_src
** get project root
#+begin_src emacs-lisp
(defun get-project-root ()
  "Get the root directory of the current project."
  (or (locate-dominating-file default-directory "package.json")
      (locate-dominating-file default-directory ".git")))
#+end_src
** get eslint executable
#+begin_src emacs-lisp
(defun get-eslint-executable ()
  "Get the path to the eslint executable in the current project."
  (let ((root (get-project-root)))
    (if root
        (expand-file-name "node_modules/.bin/eslint" root)
      "eslint")))  ;; 默认使用全局 eslint
#+end_src
* Basic Settings
** Modify Default Settings
#+begin_src emacs-lisp
  ;; 光标样式
  (setq-default cursor-type '(bar . 1))
  ;; 光标不闪烁
  (blink-cursor-mode -1)

  ;; 去掉工具栏等
  (when window-system
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
    (tooltip-mode 0))

  ;; 高亮当前行
  (global-hl-line-mode 1)
  ;; 显示列号
  (column-number-mode t)

  ;; 启动全屏
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)

  ;; 启动界面
  (setq inhibit-startup-message t
	initial-scratch-message ""
	initial-major-mode 'emacs-lisp-mode
	initial-buffer-choice t
	inhibit-splash-screen t)

  ;; - 选中粘贴时能覆盖选中的内容
  (delete-selection-mode 1)

  ;; - 文件编码
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)

  ;; - 错误信息
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; - 截断行
  (setq-default truncate-lines t)
  ;; - yes or no
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; - 驼峰单词里移动
  (subword-mode)
  ;; - 默认认为两个空格开头为一个段落，关闭此选项
  (setq sentence-end-double-space nil)
  ;; - 更好的通配符搜索
  (setq search-whitespace-regexp ".*?")
  ;; - 窗口管理
  (when (fboundp 'winner-mode)
    (winner-mode 1))

  ;; - 在 mac 上，当进入一个新的工作空间时，会默认全屏
  (setq ns-use-native-fullscreen nil)

  ;; - 不生成备份文件
  (setq make-backup-files nil)
  ;; 分割窗口的时候自动切换到该窗口
  ;; (defadvice split-window (after move-point-to-new-window activate)
  ;;   "Moves the point to the newly created window after splitting."
  ;;   (other-window 1))
#+end_src
** Performance
#+begin_src emacs-lisp
(setq
 ;; 缩短更新 screen 的时间
 idle-update-delay 0.1
 ;; 加速启动
 auto-mode-case-fold nil
 ;; 加快快捷键提示的速度
 process-adaptive-read-buffering nil
 ;; 提升 IO 性能
 echo-keystrokes 0.1
 ;; 增加单次读取进程输出的数据量（缺省 4KB)
 read-process-output-max (* 1024 1024)

 ;; 性能优化
 gc-cons-threshold 100000000

 ;; 括号匹配显示但不是烦人的跳到另一个括号
 show-paren-style 'parentheses
 ;; 当插入右括号时显示匹配的左括号
 blink-matching-paren t

 ;; 不自动添加换行符到末尾, 有些情况会出现错误
 require-final-newline nil

 ;; 比较窗口设置在同一个 frame 里
 ediff-window-setup-function (quote ediff-setup-windows-plain)
 )
#+end_src
** Show Startup Time
#+begin_src emacs-lisp
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src
** Open config.org
#+begin_src emacs-lisp
(global-set-key (kbd "<f1>")
                (lambda ()
                  (interactive)
                  (find-file "~/.emacs.d/config.org")))
#+end_src
** Reload init.el
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'reload-init-file)

  (defun reload-init-file ()
    "重新加载 init.el 文件的函数"
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
** Env path
#+begin_src emacs-lisp
  ;; 直接将环境变量拷贝到 ~/.path 中
  ;; sh -c 'printf "%s" "$PATH"' > ~/.path
  (condition-case err
      (let ((path (with-temp-buffer
		    (insert-file-contents-literally "~/.path")
		    (buffer-string))))
	(setenv "PATH" path)
	(setq exec-path (append (parse-colon-path path) (list exec-directory))))
    (error (warn "%s" (error-message-string err))))

  (use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-variables '("PATH" "MANPATH" "LSP_USE_PLISTS" "NODE_PATH")
	  exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))
#+end_src
** Auto revert buffer
#+begin_src emacs-lisp
(defun sk/diminish-auto-revert ()
  (interactive)
  (diminish 'auto-revert-mode ""))
(add-hook 'auto-revert-mode-hook 'sk/diminish-auto-revert)
#+end_src
* Toolkits
#+BEGIN_SRC emacs-lisp
  (use-package async :commands (async-start))
  (use-package cl-lib)
  (use-package dash)
  (use-package s)
  (use-package hydra)
#+END_SRC
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :defer t
    :diminish which-key-mode
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    :bind* (("M-m ?" . which-key-show-top-level))
    :config
    (which-key-mode)
    (setq which-key-show-early-on-C-h t)
    (setq which-key-idle-delay 0)
    (setq which-key-idle-secondary-delay 0.05)
    )
  #+end_src
** 符号高亮
#+begin_src emacs-lisp
(use-package symbol-overlay
  :config
  (symbol-overlay-mode +1)
  (global-set-key (kbd "M-i") #'symbol-overlay-put)
  (global-set-key (kbd "M-n") #'symbol-overlay-switch-forward)
  (global-set-key (kbd "M-p") #'symbol-overlay-switch-backward)
  (global-set-key (kbd "<f7>") #'symbol-overlay-mode)
  (global-set-key (kbd "<f8>") #'symbol-overlay-remove-all)
  )
#+end_src
** toggle quotes
#+begin_src emacs-lisp
(use-package toggle-quotes-plus
  :straight (toggle-quotes-plus :type git :host github :repo "jcs-elpa/toggle-quotes-plus")
  :bind* (("C-'" . toggle-quotes-plus))
  :config
  (setq toggle-quotes-plus-chars '("\""
                                   "'"
                                   "`")))
#+end_src
** parrot
#+begin_src emacs-lisp
(use-package parrot
  :config
  (parrot-mode -1)
  (setq parrot-rotate-dict
        '(
          (:rot ("alpha" "beta") :caps t :lower nil)
          ;; => rotations are "Alpha" "Beta"

          (:rot ("snek" "snake" "stawp"))
          ;; => rotations are "snek" "snake" "stawp"

          (:rot ("yes" "no") :caps t :upcase t)
          ;; => rotations are "yes" "no", "Yes" "No", "YES" "NO"

          (:rot ("&" "|"))
          ;; => rotations are "&" "|"

          ;; default dictionary starts here ('v')
          (:rot ("begin" "end") :caps t :upcase t)
          (:rot ("enable" "disable") :caps t :upcase t)
          (:rot ("enter" "exit") :caps t :upcase t)
          (:rot ("forward" "backward") :caps t :upcase t)
          (:rot ("front" "rear" "back") :caps t :upcase t)
          ;; (:rot ("get" "set") :caps t :upcase t)
          (:rot ("high" "low") :caps t :upcase t)
          (:rot ("in" "out") :caps t :upcase t)
          (:rot ("left" "right") :caps t :upcase t)
          (:rot ("min" "max") :caps t :upcase t)
          (:rot ("on" "off") :caps t :upcase t)
          (:rot ("prev" "next"))
          (:rot ("start" "stop") :caps t :upcase t)
          (:rot ("true" "false") :caps t :upcase t)
          (:rot ("&&" "||"))
          (:rot ("==" "!="))
          (:rot ("." "->"))
          (:rot ("if" "else" "elif"))
          (:rot ("ifdef" "ifndef"))
          (:rot ("int8_t" "int16_t" "int32_t" "int64_t"))
          (:rot ("uint8_t" "uint16_t" "uint32_t" "uint64_t"))
          (:rot ("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
          (:rot ("1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th"))

          ;; mine
          (:rot ("let" "const" "var"))
          (:rot ("sm" "md" "lg" "xl" "2xl" "3xl"))
          (:rot ("aspect-auto" "aspect-square" "aspect-video"))
          (:rot ("break-after-auto" "break-after-avoid" "break-after-all" "break-after-avoid-page" "break-after-page" "break-after-left" "break-after-right" "break-after-column"))
          (:rot ("box-border" "box-content"))
          (:rot ("block" "inline-block" "inline" "flex" "inline-flex" "table" "inline-table" "table-caption" "table-cell" "table-column" "table-column-group" "table-footer-group" "table-header-group" "table-row-group" "table-row" "flow-root" "grid" "inline-grid" "contents" "list-item" "hidden"))
          (:rot ("float-right" "float-left" "float-none"))
          (:rot ("clear-left" "clear-right" "clear-both" "clear-none"))
          (:rot ("object-contain" "object-cover" "object-fill" "object-none" "object-scale-down"))
          (:rot ("object-bottom" "object-center" "object-left" "object-left-bottom" "object-left-top" "object-right" "object-right-bottom" "object-right-top" "object-top"))
          (:rot ("overflow-auto" "overflow-hidden" "overflow-clip" "overflow-visible" "overflow-scroll"))
          (:rot ("static" "fixed" "absolute" "relative" "sticky"))
          (:rot ("visible" "invisible" "collapse"))
          (:rot ("flex-row" "flex-row-reverse" "flex-col" "flex-col-reverse"))
          (:rot ("flex-wrap" "flex-wrap-reverse" "flex-nowrap"))
          (:rot ("flex-1" "flex-auto" "flex-initial" "flex-none"))
          (:rot ("grow" "grow-0"))
          (:rot ("shrink" "shrink-0"))
          (:rot ("get" "post" "set") :caps t :upcase t)
          )))

(global-set-key (kbd "s-I") 'parrot-rotate-next-word-at-point)
#+end_src
** string inflection
#+begin_src emacs-lisp
(use-package string-inflection)
(global-set-key (kbd "s-i") 'my-string-inflection-cycle-auto)

(defun my-string-inflection-cycle-auto ()
  "switching by major-mode"
  (interactive)
  (cond
   ;; for emacs-lisp-mode
   ((eq major-mode 'emacs-lisp-mode)
    (string-inflection-all-cycle))
   ;; for python
   ((eq major-mode 'python-mode)
    (string-inflection-python-style-cycle))
   ;; for java
   ((eq major-mode 'java-mode)
    (string-inflection-java-style-cycle))
   ;; for elixir
   ((eq major-mode 'elixir-mode)
    (string-inflection-elixir-style-cycle))
   (t
    ;; default
    (string-inflection-ruby-style-cycle))))
#+end_src
** move text
#+begin_src emacs-lisp
(use-package move-text)
(global-set-key (kbd "s-<") 'move-text-up)
(global-set-key (kbd "s->") 'move-text-down)
#+end_src
** iedit
#+begin_src emacs-lisp
(use-package maple-iedit
  :straight (:type git :host github :repo "honmaple/emacs-maple-iedit")
  :commands (maple-iedit-match-all maple-iedit-match-next maple-iedit-match-previous)
  :config
  (setq maple-iedit-ignore-case t)

  (defhydra maple/iedit ()
    ("n" maple-iedit-match-next "next")
    ("t" maple-iedit-skip-and-match-next "skip and next")
    ("T" maple-iedit-skip-and-match-previous "skip and previous")
    ("p" maple-iedit-match-previous "prev"))
  :bind* (("C-," . maple/iedit/body)))
#+end_src
** expand region
#+begin_src emacs-lisp
(use-package expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src
** diminish
#+begin_src emacs-lisp
(use-package diminish
  :demand t
  :diminish (visual-line-mode . "ω")
  :diminish hs-minor-mode
  :diminish abbrev-mode
  :diminish auto-fill-function
  :diminish subword-mode
  :diminish eldoc-mode
  :diminish which-key-mode
  :diminish persp-mode
  )
#+end_src
** 重启Emacs
#+begin_src emacs-lisp
(use-package restart-emacs
  :bind* (("<f2>" . restart-emacs)))
#+end_src
** 自动保存
#+begin_src emacs-lisp
  (use-package auto-save
    :straight (auto-save :type git :host github :repo "manateelazycat/auto-save")
    :config
    (auto-save-enable)
    (setq auto-save-silent t)
    (setq auto-save-delete-trailing-whitespace t))
#+end_src
** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :functions
  all-the-icons-completion-mode
  :hook
  (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))

  (use-package all-the-icons-dired
  :diminish)

  (use-package all-the-icons-ibuffer
  :after (ibuffer)
  :functions
  all-the-icons-ibuffer-mode
  :config
  (all-the-icons-ibuffer-mode 1))
#+end_src
** dicover mode
#+begin_src emacs-lisp
  (use-package discover-my-major
    :bind (("C-h C-m" . discover-my-major)
           ("C-h s-m" . discover-my-mode)))
#+end_src
* Search
** engine-mode
#+begin_src emacs-lisp
(use-package engine-mode
  :config
  (engine-mode t)
  (engine/set-keymap-prefix (kbd "C-c s"))
  (defengine baidu "https://www.baidu.com/s?wd=%s"
	           :keybinding "b")
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")
  (defengine qwant
    "https://www.qwant.com/?q=%s"
    :docstring "什么都能搜到哦~~😍😍"
    :keybinding "q")
  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s"
    :keybinding "r")
  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")
  (defengine twitter
    "https://twitter.com/search?q=%s"
    :keybinding "t")
  (defengine wolfram-alpha
    "http://www.wolframalpha.com/input/?i=%s"
    :docstring "数学搜索引擎，公式，坐标图等。"
    :keybinding "w")
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "/")
  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "y")
  )
#+end_src
** wgrep
#+begin_src emacs-lisp
(use-package wgrep)
(setq wgrep-auto-save-buffer t)
#+end_src
* Theme Settings
** Fonts
#+begin_src emacs-lisp
  (defvar gcl/default-font-size 150)
  (defvar gcl/default-variable-font-size 150)

  ;; Make frame transparency overridable
  (defvar gcl/frame-transparency '(90 . 90))

  (defvar gcl/variable-pitch-size 120)
  (defvar gcl/org-heading-font "Iosevka Aile"
    "The font used for Org Mode headings.")

  (set-face-attribute 'default nil :font "Fira Code Retina" :height gcl/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height gcl/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height gcl/default-variable-font-size :weight 'regular)
#+end_src
** DOOM Emacs Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
** Mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (progn
            (setq doom-modeline-env-version nil
                  doom-modeline-icon nil
                  doom-modeline-minor-modes t)
            (doom-modeline-mode 1)))
#+end_src
* org-mode
#+begin_src emacs-lisp
  (setq org-directory "~/.gclrc/org")

  (defun gcl/org-path (path)
    (expand-file-name path org-directory))

  ;; Turn on indentation and auto-fill mode for Org files
  (defun dw/org-mode-setup ()
    ;; (variable-pitch-mode 1)
    (org-indent-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq corfu-auto nil)
    (setq evil-auto-indent nil))

  (defun dw/org-move-done-tasks-to-bottom ()
    "Sort all tasks in the topmost heading by TODO state."
    (interactive)
    (save-excursion
      (while (org-up-heading-safe))
      (org-sort-entries nil ?o))

    ;; Reset the view of TODO items
    (org-overview)
    (org-show-entry)
    (org-show-children))


  (defun dw/org-todo-state-change-hook ()
    (when (string= org-state "DONE")
      (dw/org-move-done-tasks-to-bottom)))
  ;; (add-hook 'org-after-todo-state-change-hook 'dw/org-todo-state-change-hook)
#+end_src
** configuration
#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :hook (org-mode . dw/org-mode-setup)
    :bind (:map org-mode-map
                ("M-N" . org-move-subtree-down)
                ("M-P" . org-move-subtree-up))
    :config
    (setq org-ellipsis "..."
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2
          org-capture-bookmark nil
          )

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)))
    )
#+end_src
** org-face
#+begin_src emacs-lisp
  (use-package org-faces
    :straight (:type built-in)
    :after org
    :config
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font gcl/org-heading-font :weight 'medium :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font gcl/org-heading-font :weight 'medium :height (cdr face))))
#+end_src
** org-tempo
#+begin_src emacs-lisp
  (use-package org-tempo
    :straight (:type built-in)
    :after org
    :config
    (dolist (item '(("sh" . "src sh")
                    ("el" . "src emacs-lisp")
                    ("li" . "src lisp")
                    ("sc" . "src scheme")
                    ("ts" . "src typescript")
                    ("py" . "src python")
                    ("html" . "src html")
                    ("vue" . "src vue")
                    ("go" . "src go")
                    ("einit" . "src emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes")
                    ("emodule" . "src emacs-lisp :tangle ~/.config/emacs/modules/dw-MODULE.el :mkdirp yes")
                    ("yaml" . "src yaml")
                    ("json" . "src json")))
      (add-to-list 'org-structure-template-alist item)))


#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src
* Project Settings
** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ;; ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c TAB"))  ; pick your own prefix key here
    :init
    (persp-mode)
    :diminish perps-mode
    :config
    (setq persp-state-default-file (expand-file-name ".gcl" user-emacs-directory))
    (setq persp-show-modestring nil)
    ;; (setq persp-modestring-short t)
    (add-hook 'kill-emacs-hook #'persp-state-save)
    (use-package persp-projectile)
    )
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :init
    (projectile-mode +1)
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;; alien, hybrid
    (setq projectile-indexing-method 'alien projectile-enable-caching t)
    )
#+end_src
** consult
#+begin_src emacs-lisp
  (use-package embark-consult
    :after (embark consult)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ;; ("C-c h" . consult-history)
           ;; ("C-c k" . consult-kmacro)
           ;; ("C-c m" . consult-man)
           ;; ("C-c i" . consult-info)
           ("C-c s p" . consult-ripgrep)
           ([remap Info-search] . consult-info)
           ([remap isearch-forward] . consult-line)
           ([remap bookmark-jump] . consult-bookmark)
           ([remap switch-to-buffer] . consult-buffer)
           ;; C-x bindings in `ctl-x-map'
           ;; ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-c b o" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-c b m" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-c b p" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("C-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("s-1" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("s-d" . consult-find)                  ;; Alternative: consult-fd
           ;; ("M-s c" . consult-locate)
           ;; ("M-s g" . consult-grep)
           ;; ("M-s G" . consult-git-grep)
           ;; ("M-s r" . consult-ripgrep)
           ;; ("M-s L" . consult-line-multi)
           ;; ("M-s k" . consult-keep-lines)
           ;; ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ;; ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ;; ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ;; ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ;; ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ;; ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ;; ("M-r" . consult-history)
           )                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
      ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
      ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
      ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
      ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
      ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
* Development Settings
#+begin_src emacs-lisp
  ;; 自定义的模式集合
  (defvar my-web-modes
    '(tsx-ts-mode
      typescript-ts-mode
      json-ts-mode
      js-ts-mode
      prisma-ts-mode
      typescript-mode
      go-ts-mode)
    "List of modes for web development.")

  ;; 通用的钩子启用函数
  (defun my-enable-hooks (modes hook-fn)
    "Enable HOOK-FN for MODES."
    (dolist (mode modes)
      (add-hook (intern (concat (symbol-name mode) "-hook")) hook-fn)))

  ;; 自动查找项目中的 ESLint 配置文件
  (defun find-eslint-config ()
    "Find ESLint configuration file in project root."
    (let ((root (get-project-root)))
      (when root
        (or (and (file-exists-p (expand-file-name ".eslintrc" root))
                 (expand-file-name ".eslintrc" root))
            (and (file-exists-p (expand-file-name ".eslintrc.js" root))
                 (expand-file-name ".eslintrc.js" root))
            (and (file-exists-p (expand-file-name ".eslintrc.json" root))
                 (expand-file-name ".eslintrc.json" root))
            (and (file-exists-p (expand-file-name "package.json" root))
                 (let* ((package-json (expand-file-name "package.json" root))
                        (eslint-config (and (file-readable-p package-json)
                                            (with-temp-buffer
                                              (insert-file-contents package-json)
                                              (goto-char (point-min))
                                              (and (search-forward "\"eslintConfig\"" nil t)
                                                   (search-forward-regexp ": ?{")
                                                   (json-read-object)))))))
                 (and eslint-config (concat root "/.eslintrc")))))))

#+end_src

** Modes
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.[cm]?js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))       ;
#+end_src
** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :config
  (sp-use-smartparens-bindings))
#+end_src
** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :hook ((prog-mode org-mode) . yas-minor-mode)
  :bind (("C-c y i" . yas-insert-snippet)
         ("C-c y f" . yas-visit-snippet-file)
         ("C-c y n" . yas-new-snippet)
         ;; ("C-c y t" . yas-tryout-snippet)
         ;; ("C-c y l" . yas-describe-tables)
         ;; ("C-c y g" . yas-global-mode)
         ;; ("C-c y m" . yas-minor-mode)
         ("C-c y r" . yas-reload-all)
         ("C-c y x" . yas-expand)
         :map yas-keymap
         ("C-i" . yas-next-field-or-maybe-expand))
  :config
  (yas-reload-all))

(use-package yasnippet-snippets
  :defer t
  :after yasnippet)
#+end_src
** Comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind* (("M-;" . evilnc-comment-or-uncomment-lines))
  )
#+end_src
** Languages
*** markdown
#+begin_src emacs-lisp
(defun dw/setup-markdown-mode ()
  (visual-fill-column-mode 1)
  (display-line-numbers-mode 0))

(use-package markdown-mode
  :mode "\\.md\\'"
  :config
  (setq markdown-command "marked")
  (add-hook 'markdown-mode-hook #'dw/setup-markdown-mode)
  (dolist (face '((markdown-header-face-1 . 1.2)
                  (markdown-header-face-2 . 1.1)
                  (markdown-header-face-3 . 1.0)
                  (markdown-header-face-4 . 1.0)
                  (markdown-header-face-5 . 1.0)))
    (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))
#+end_src
*** js-doc
#+begin_src emacs-lisp
(use-package js-doc
  :config
  (setq js-doc-mail-address user-mail-address
	  js-doc-author (format "<%s> <%s>" user-full-name js-doc-mail-address)
	  ;; js-doc-url user-blog-url
	  ;; js-doc-license "MIT"
	  ))
#+end_src
*** web-mode
#+begin_src emacs-lisp
(use-package web-mode
  ;; :hook (web-mode . lsp-deferred)
  :config
  (setq
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 2
   web-mode-style-padding 0
   web-mode-script-padding 0
   web-mode-enable-auto-closing t
   web-mode-enable-auto-opening t
   web-mode-enable-auto-pairing nil
   web-mode-enable-auto-indentation t
   web-mode-tag-auto-close-style 1
   web-mode-enable-current-element-highlight t)

  ;; 设置不同类型代码的注释格式
  (setq web-mode-comment-formats
	  '(("javascript" . "//")    ; JavaScript 注释
	    ("jsx" . "//")           ; JSX 注释
	    ("php" . "//")           ; PHP 注释
	    ("css" . "/*")           ; CSS 注释
	    ("java" . "//")          ; Java 注释
	    ;; 添加更多类型的注释格式
	    ))

  ;; Let smartparens handle auto closing brackets, e.g. {{ }} or {% %}
  ;; https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/web/%2Bhtml.el#L56
  (dolist (alist web-mode-engines-auto-pairs)
    (setcdr alist
	      (cl-loop for pair in (cdr alist)
		       unless (string-match-p "^[a-z-]" (cdr pair))
		       collect (cons (car pair)
				     (string-trim-right (cdr pair)
							"\\(?:>\\|]\\|}\\)+\\'")))))
  ;; (add-to-list 'lsp-language-id-configuration '(web-mode . "vue"))
  )
#+end_src
*** javascript
#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.jsx?\\'"
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (setq-default js-indent-level 2))
#+end_src
*** typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.[cm]?ts\\'"
  ;; :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src
*** css
#+begin_src emacs-lisp
  (use-package scss-mode)
(use-package css-mode)
#+end_src
*** emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :diminish emmet-mode
  :hook ((sgml-mode html-mode css-mode web-mode typescript-mode js-mode) . emmet-mode)
  :config
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))))
#+end_src
*** json
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src
*** yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'"
  :mode "\\.yaml\\'"
  :hook ((yaml-mode . yaml-imenu-enable)))

(use-package yaml-imenu
  :after yaml-mode)
#+end_src
*** python
#+begin_src emacs-lisp
(use-package python-mode)
#+end_src
*** golang
#+begin_src emacs-lisp
(use-package go-mode)
#+end_src
*** dockfile
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
*** php
#+begin_src emacs-lisp
(use-package php-mode)
#+end_src
*** sql
#+begin_src emacs-lisp
(use-package sql-indent)
(add-hook 'sql-mode-hook 'sqlind-minor-mode)
#+end_src
*** pkg-info
#+begin_src emacs-lisp
(use-package pkg-info)
#+end_src
*** lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src
** Syntax
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :init (global-flycheck-mode))
#+end_src
** Parens
#+begin_src emacs-lisp
(use-package highlight-parentheses
  :hook (prog-mode . highlight-parentheses-mode)
  :diminish highlight-parentheses-mode
  :config
  (add-hook 'minibuffer-setup-hook #'highlight-parentheses-minibuffer-setup)
  )
#+end_src
** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** Colorful
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish rainbow-mode
  :defer t
  :hook ((prog-mode org-mode) . rainbow-mode))
#+end_src
** Autocompletion
*** corfu
#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  :init
  (global-corfu-mode))
#+end_src
*** kind-icon
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** orderless
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :bind (("s-'" . vertico-repeat))
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  (use-package vertico-directory
    :straight vertico
    :after vertico
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
*** savehist
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src
*** marginalia
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
*** embark
#+begin_src emacs-lisp

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

#+end_src
** lsp-mode
#+begin_src emacs-lisp
  (defun gcl/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . gcl/lsp-mode-setup)
           (lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . lsp-diagnostics-mode))
    :diminish lsp-mode
    :diminish lsp-lens-mode
    :config
    (my-enable-hooks my-web-modes 'lsp-deferred)
    (defvar-local lsp-format-on-save t
      "Format `lsp-mode'-managed buffer before save.")
    (defun lsp-format-on-save-not-apheleia ()
      "Format on save using LSP server, not `apheleia'."
      (if lsp-format-on-save
          (progn
            (add-hook 'before-save-hook #'lsp-format-buffer nil 'local)
            (setq-local apheleia-mode nil))))
    (add-hook 'lsp-configure-hook #'lsp-format-on-save-not-apheleia)
    ;; --no-eslintrc 使用全局配置
    (setq lsp-eslint-server-command
        `(, (executable-find "node")
          , (get-eslint-executable)
          "--config" ,(or (find-eslint-config) "eslint.config.mjs")
          "--fix"
          "--stdin"
          "--stdin-filename"
          "--format"
          "json"))
    :custom
    (lsp-prefer-flymake nil) ; 使用 lsp-ui 和 flycheck 而不是 flymake
    (lsp-keymap-prefix "C-c l")
    (lsp-completion-provider :none) ;; we use Corfu
    (lsp-diagnostics-provider :flycheck)
    (lsp-log-io nil) ; only for debug
    (lsp-idle-delay 0.5)
    (lsp-enable-file-watchers nil) ; 只监听当前项目中的文件
    ;; (lsp-enable-folding nil)
    )

  ;; 安装和配置 lsp-eslint
  (use-package lsp-eslint
    :straight lsp-mode
    :commands lsp-eslint-enable
    :config
    (my-enable-hooks my-web-modes 'lsp-eslint-enable))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable nil
          lsp-ui-doc-enable nil)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-tailwindcss
    :straight (:type git :host github :repo "merrickluo/lsp-tailwindcss")
    :config
    (setq lsp-tailwindcss-add-on-mode t))
  (add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)

  ;; 其他 buffer 中启用
  (add-to-list 'lsp-language-id-configuration '(".*\\.erb$" . "html"))

  (use-package lsp-treemacs
  :commands lsp-treemacs-errors-list)
#+end_src
** git
*** magit
#+begin_src emacs-lisp
(use-package magit
  :bind* (("C-S-g" . magit))
  :config
  ;; ;; 提交时候不显示提交细节
  (setq magit-commit-show-diff nil)
  ;; ;; 没有焦点时候不刷新状态
  (setq magit-refresh-status-buffer nil)
  ;; ;; 当前buffer打开magit
  (setq magit-display-buffer-function
        (lambda (buffer)
          (display-buffer buffer '(display-buffer-same-window))))
  ;; (setq magit-ellipsis (get-byte 0 "."))
  ;; ;; 加速diff
  (setq magit-revision-insert-related-refs nil)
  (setq magit-diff-refine-hunk t)
  (setq magit-diff-paint-whitespace nil)
  (setq magit-ediff-dwim-show-on-hunks t)
  (setq magit-display-buffer-function
        (lambda (buffer)
          (display-buffer buffer '(display-buffer-same-window))))
  ;; ;; 加速diff
  (setq magit-revision-insert-related-refs nil)
  )
#+end_src
*** blamer
#+begin_src emacs-lisp
  (use-package blamer
    :bind (("C-c g c" . blamer-show-posframe-commit-info))
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 40)
    (blamer-author-formatter " ✎ %s ")
    (blamer-datetime-formatter "[%s]")
    (blamer-commit-formatter " ● %s")
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     ;; :background nil
                     :height 120
                     :italic t)))
    :config
    ;; (global-blamer-mode 1)
    )
#+end_src
*** git modes
#+begin_src emacs-lisp
(use-package git-modes
  :config
  (add-to-list 'auto-mode-alist
               (cons "/.dockerignore\\'" 'gitignore-mode))
  (add-to-list 'auto-mode-alist
               (cons "/.gitignore\\'" 'gitignore-mode))
  (add-to-list 'auto-mode-alist
               (cons "/.gitconfig\\'" 'gitconfig-mode))
  )

#+end_src
*** smerge
#+begin_src emacs-lisp
  (use-package smerge-mode
    :config
    (defhydra smerge/panel ()
    "smerge"
    ("k" (smerge-prev) "prev change" )
    ("j" (smerge-next) "next change")
    ("u" (smerge-keep-upper) "keep upper")
    ("l" (smerge-keep-lower) "keep lower")
    ("q" nil "quit" :exit t))
    :bind ("s-," . smerge/panel/body))
#+end_src
*** diff
#+begin_src emacs-lisp
    (use-package diff-hl
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
      :config
      (global-diff-hl-mode))
#+end_src
** terminal
#+begin_src emacs-lisp
(use-package vterm)
(use-package multi-vterm)
(use-package vterm-toggle)
(with-eval-after-load 'vterm
  (define-key vterm-mode-map [return] #'vterm-send-return)
  (define-key vterm-mode-map [(control return)]   #'vterm-toggle-insert-cd)
  (define-key vterm-mode-map (kbd "s-n")   'vterm-toggle-forward)
  (define-key vterm-mode-map (kbd "s-p")   'vterm-toggle-backward)
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
		 '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		   (display-buffer-reuse-window display-buffer-at-bottom)
		   ;;(display-buffer-reuse-window display-buffer-in-direction)
		   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		   ;;(direction . bottom)
		   ;;(dedicated . t) ;dedicated is supported in emacs27
		   (reusable-frames . visible)
		   (window-height . 0.3))))

(global-set-key (kbd "s-`") 'vterm-toggle)
(global-set-key (kbd "s-<return>") 'multi-vterm-project)
#+end_src
* Global Keybindings
#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "s-t") 'org-todo)
  (bind-keys*
   ("C-x ="     . indent-region)
   ("s-o" . other-window))
#+end_src
* My Keybindings
** fn
| key  | function                   |
|------+----------------------------|
| ~f1~ | open config.org            |
| ~f2~ | restart emacs              |
| ~f5~ | reload init config         |
| ~f7~ | symbol overlay mode        |
| ~f8~ | remove all symbol overlays |
|      |                            |
** C/s/M-[key]
| key        | function              | mode         |
|------------+-----------------------+--------------|
| ~s-<return>~ | new line below        |              |
| ~M-<return>~ | new line above        |              |
|------------+-----------------------+--------------|
| ~C-%, C-5~   | bounce between parens |              |
| ~C-=~        | expand region         |              |
| ~C-,~        | iedit                 |              |
| ~C-'~        | toggle quotes         |              |
| ~C-.~        | embark-act            |              |
| ~C-;~        | embark-dwim           |              |
| ~C-t~        | transpose chars       |              |
|------------+-----------------------+--------------|
| ~M-;~        | comment/uncomment     |              |
| ~M-i~        | imenu                 |              |
| ~M-o~        | other window          |              |
| ~M-i~        | symbol highlight      |              |
| ~M-n~        | symbol next           |              |
| ~M-p~        | symbol prev           |              |
| ~M-N/P~      | org subtree down/up   |              |
|------------+-----------------------+--------------|
| ~s-1~        | consult imenu         |              |
| ~s-<>~       | move text up/down     |              |
| ~s-,~        | smerge                |              |
| ~s-`~        | toggle vterm          |              |
| ~s-<return>~ | multi vterm           |              |
| ~s-d~        | find file/directory   |              |
| ~s-i~        | string inflection     |              |
| ~s-I~        | parrot                |              |
| ~s-o~        | other window          |              |
| ~s-t~        | org-todo              | org-mode-map |
|            |                       |              |

** C-S, Control-Shift
| key     | function       |
|---------+----------------|
| ~C-S-SPC~ | just one space |
| ~C-S-g~   | magit          |

** C-c
| key        | function                    |
|------------+-----------------------------|
| ~C-c l~      | org-store-link              |
| ~C-c a~      | org-agend                   |
| ~C-c c~      | org-capture                 |
| ~C-c o~      | open with external app      |
|------------+-----------------------------|
| ~C-c TAB~    | perspective                 |
|            |                             |
|------------+-----------------------------|
| *C-c s*      |                             |
| ~C-c sp~     | consult ripgrep             |
| ~C-c s[...]~ | search engine               |
|------------+-----------------------------|
| *C-c g*      | git, ...                    |
| ~C-c gc~     | show commit info            |
|------------+-----------------------------|
| *C-c b*      | buffer, bookmark,...        |
| ~C-c bo~     | open buffer to other window |
| ~C-c bp~     | open project buffer         |
| ~C-c bm~     | bookmark                    |
|------------+-----------------------------|
| *C-c y*      | yas, dict, yank...          |
| ~C-c y~      | yasnippets                  |
| ~C-c yi~     | insert                      |
| ~C-c yf~     | visit file                  |
| ~C-c yn~     | new snippet                 |
| ~C-c yx~     | expand                      |

** C-x
| key   | function      | mode |
|-------+---------------+------|
| ~C-x =~ | indeng region |      |
| ~C-x b~ | switch buffer |      |
** C-h
| key   | function        | mode |
|-------+-----------------+------|
| ~C-h B~ | embark bindings |      |
* Tangle config
#+BEGIN_SRC emacs-lisp

(defun tangle-if-init ()
  "If the current buffer is 'config.org' the code-blocks are
    tangled, and the tangled file is compiled."
  (when (string-suffix-p "config.org" (buffer-file-name))
    (tangle-init)))

(defun tangle-init-sync ()
  (interactive)
  (message "Tangling init")
  ;; Avoid running hooks when tangling.
  (let ((prog-mode-hook nil)
  (src  (expand-file-name "config.org" user-emacs-directory))
  (dest (expand-file-name "config.el"  user-emacs-directory)))
    (require 'ob-tangle)
    (org-babel-tangle-file src dest)
    (if (byte-compile-file dest)
  (byte-compile-dest-file dest)
(with-current-buffer byte-compile-log-buffer
  (buffer-string)))))

(defun tangle-init ()
  "Tangle init.org asynchronously."
  (interactive)
  (message "Tangling init")
  (async-start
    (symbol-function #'tangle-init-sync)
    (lambda (result)
      (message "Init tangling completed: %s" result))))

#+END_SRC

# Local Variables:
# eval: (when (fboundp #'tangle-if-init) (add-hook 'after-save-hook #'tangle-if-init))
# End:
